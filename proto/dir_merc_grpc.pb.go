// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/dir_merc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectorClient is the client API for Director service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorClient interface {
	Preparacion(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Response, error)
	InicioPiso(ctx context.Context, in *Piso, opts ...grpc.CallOption) (*Response, error)
	DecisionesPiso(ctx context.Context, in *Piso, opts ...grpc.CallOption) (*Response, error)
	ConsultarDoshBank(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*DoshBank, error)
	ListoParaSiguientePiso(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Response, error)
}

type directorClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorClient(cc grpc.ClientConnInterface) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) Preparacion(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mercenario.Director/Preparacion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) InicioPiso(ctx context.Context, in *Piso, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mercenario.Director/InicioPiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) DecisionesPiso(ctx context.Context, in *Piso, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mercenario.Director/DecisionesPiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConsultarDoshBank(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*DoshBank, error) {
	out := new(DoshBank)
	err := c.cc.Invoke(ctx, "/mercenario.Director/ConsultarDoshBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ListoParaSiguientePiso(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mercenario.Director/ListoParaSiguientePiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServer is the server API for Director service.
// All implementations must embed UnimplementedDirectorServer
// for forward compatibility
type DirectorServer interface {
	Preparacion(context.Context, *Mercenario) (*Response, error)
	InicioPiso(context.Context, *Piso) (*Response, error)
	DecisionesPiso(context.Context, *Piso) (*Response, error)
	ConsultarDoshBank(context.Context, *Vacio) (*DoshBank, error)
	ListoParaSiguientePiso(context.Context, *Mercenario) (*Response, error)
	mustEmbedUnimplementedDirectorServer()
}

// UnimplementedDirectorServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServer struct {
}

func (UnimplementedDirectorServer) Preparacion(context.Context, *Mercenario) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preparacion not implemented")
}
func (UnimplementedDirectorServer) InicioPiso(context.Context, *Piso) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InicioPiso not implemented")
}
func (UnimplementedDirectorServer) DecisionesPiso(context.Context, *Piso) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionesPiso not implemented")
}
func (UnimplementedDirectorServer) ConsultarDoshBank(context.Context, *Vacio) (*DoshBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarDoshBank not implemented")
}
func (UnimplementedDirectorServer) ListoParaSiguientePiso(context.Context, *Mercenario) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListoParaSiguientePiso not implemented")
}
func (UnimplementedDirectorServer) mustEmbedUnimplementedDirectorServer() {}

// UnsafeDirectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServer will
// result in compilation errors.
type UnsafeDirectorServer interface {
	mustEmbedUnimplementedDirectorServer()
}

func RegisterDirectorServer(s grpc.ServiceRegistrar, srv DirectorServer) {
	s.RegisterService(&Director_ServiceDesc, srv)
}

func _Director_Preparacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mercenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).Preparacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/Preparacion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).Preparacion(ctx, req.(*Mercenario))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_InicioPiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Piso)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).InicioPiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/InicioPiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).InicioPiso(ctx, req.(*Piso))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_DecisionesPiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Piso)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DecisionesPiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/DecisionesPiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DecisionesPiso(ctx, req.(*Piso))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConsultarDoshBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConsultarDoshBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/ConsultarDoshBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConsultarDoshBank(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ListoParaSiguientePiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mercenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ListoParaSiguientePiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/ListoParaSiguientePiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ListoParaSiguientePiso(ctx, req.(*Mercenario))
	}
	return interceptor(ctx, in, info, handler)
}

// Director_ServiceDesc is the grpc.ServiceDesc for Director service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Director_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercenario.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preparacion",
			Handler:    _Director_Preparacion_Handler,
		},
		{
			MethodName: "InicioPiso",
			Handler:    _Director_InicioPiso_Handler,
		},
		{
			MethodName: "DecisionesPiso",
			Handler:    _Director_DecisionesPiso_Handler,
		},
		{
			MethodName: "ConsultarDoshBank",
			Handler:    _Director_ConsultarDoshBank_Handler,
		},
		{
			MethodName: "ListoParaSiguientePiso",
			Handler:    _Director_ListoParaSiguientePiso_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dir_merc.proto",
}

// NameNodeServiceClient is the client API for NameNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeServiceClient interface {
	RegisterDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	GetDecisions(ctx context.Context, in *GetDecisionsRequest, opts ...grpc.CallOption) (*GetDecisionsResponse, error)
}

type nameNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeServiceClient(cc grpc.ClientConnInterface) NameNodeServiceClient {
	return &nameNodeServiceClient{cc}
}

func (c *nameNodeServiceClient) RegisterDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, "/mercenario.NameNodeService/RegisterDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeServiceClient) GetDecisions(ctx context.Context, in *GetDecisionsRequest, opts ...grpc.CallOption) (*GetDecisionsResponse, error) {
	out := new(GetDecisionsResponse)
	err := c.cc.Invoke(ctx, "/mercenario.NameNodeService/GetDecisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServiceServer is the server API for NameNodeService service.
// All implementations must embed UnimplementedNameNodeServiceServer
// for forward compatibility
type NameNodeServiceServer interface {
	RegisterDecision(context.Context, *DecisionRequest) (*DecisionResponse, error)
	GetDecisions(context.Context, *GetDecisionsRequest) (*GetDecisionsResponse, error)
	mustEmbedUnimplementedNameNodeServiceServer()
}

// UnimplementedNameNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServiceServer struct {
}

func (UnimplementedNameNodeServiceServer) RegisterDecision(context.Context, *DecisionRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDecision not implemented")
}
func (UnimplementedNameNodeServiceServer) GetDecisions(context.Context, *GetDecisionsRequest) (*GetDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecisions not implemented")
}
func (UnimplementedNameNodeServiceServer) mustEmbedUnimplementedNameNodeServiceServer() {}

// UnsafeNameNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServiceServer will
// result in compilation errors.
type UnsafeNameNodeServiceServer interface {
	mustEmbedUnimplementedNameNodeServiceServer()
}

func RegisterNameNodeServiceServer(s grpc.ServiceRegistrar, srv NameNodeServiceServer) {
	s.RegisterService(&NameNodeService_ServiceDesc, srv)
}

func _NameNodeService_RegisterDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).RegisterDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.NameNodeService/RegisterDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).RegisterDecision(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNodeService_GetDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServiceServer).GetDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.NameNodeService/GetDecisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServiceServer).GetDecisions(ctx, req.(*GetDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNodeService_ServiceDesc is the grpc.ServiceDesc for NameNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercenario.NameNodeService",
	HandlerType: (*NameNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDecision",
			Handler:    _NameNodeService_RegisterDecision_Handler,
		},
		{
			MethodName: "GetDecisions",
			Handler:    _NameNodeService_GetDecisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dir_merc.proto",
}

// DataNodeServiceClient is the client API for DataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeServiceClient interface {
	StoreDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	FetchDecisions(ctx context.Context, in *FetchDecisionsRequest, opts ...grpc.CallOption) (*FetchDecisionsResponse, error)
}

type dataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeServiceClient(cc grpc.ClientConnInterface) DataNodeServiceClient {
	return &dataNodeServiceClient{cc}
}

func (c *dataNodeServiceClient) StoreDecision(ctx context.Context, in *DecisionRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, "/mercenario.DataNodeService/StoreDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeServiceClient) FetchDecisions(ctx context.Context, in *FetchDecisionsRequest, opts ...grpc.CallOption) (*FetchDecisionsResponse, error) {
	out := new(FetchDecisionsResponse)
	err := c.cc.Invoke(ctx, "/mercenario.DataNodeService/FetchDecisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServiceServer is the server API for DataNodeService service.
// All implementations must embed UnimplementedDataNodeServiceServer
// for forward compatibility
type DataNodeServiceServer interface {
	StoreDecision(context.Context, *DecisionRequest) (*DecisionResponse, error)
	FetchDecisions(context.Context, *FetchDecisionsRequest) (*FetchDecisionsResponse, error)
	mustEmbedUnimplementedDataNodeServiceServer()
}

// UnimplementedDataNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServiceServer struct {
}

func (UnimplementedDataNodeServiceServer) StoreDecision(context.Context, *DecisionRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreDecision not implemented")
}
func (UnimplementedDataNodeServiceServer) FetchDecisions(context.Context, *FetchDecisionsRequest) (*FetchDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDecisions not implemented")
}
func (UnimplementedDataNodeServiceServer) mustEmbedUnimplementedDataNodeServiceServer() {}

// UnsafeDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServiceServer will
// result in compilation errors.
type UnsafeDataNodeServiceServer interface {
	mustEmbedUnimplementedDataNodeServiceServer()
}

func RegisterDataNodeServiceServer(s grpc.ServiceRegistrar, srv DataNodeServiceServer) {
	s.RegisterService(&DataNodeService_ServiceDesc, srv)
}

func _DataNodeService_StoreDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).StoreDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.DataNodeService/StoreDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).StoreDecision(ctx, req.(*DecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNodeService_FetchDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServiceServer).FetchDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.DataNodeService/FetchDecisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServiceServer).FetchDecisions(ctx, req.(*FetchDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNodeService_ServiceDesc is the grpc.ServiceDesc for DataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercenario.DataNodeService",
	HandlerType: (*DataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreDecision",
			Handler:    _DataNodeService_StoreDecision_Handler,
		},
		{
			MethodName: "FetchDecisions",
			Handler:    _DataNodeService_FetchDecisions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dir_merc.proto",
}

// DirectorServiceClient is the client API for DirectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorServiceClient interface {
	StartMission(ctx context.Context, in *StartMissionRequest, opts ...grpc.CallOption) (*StartMissionResponse, error)
	UpdateOrder(ctx context.Context, in *OrderUpdateRequest, opts ...grpc.CallOption) (*OrderUpdateResponse, error)
}

type directorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorServiceClient(cc grpc.ClientConnInterface) DirectorServiceClient {
	return &directorServiceClient{cc}
}

func (c *directorServiceClient) StartMission(ctx context.Context, in *StartMissionRequest, opts ...grpc.CallOption) (*StartMissionResponse, error) {
	out := new(StartMissionResponse)
	err := c.cc.Invoke(ctx, "/mercenario.DirectorService/StartMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorServiceClient) UpdateOrder(ctx context.Context, in *OrderUpdateRequest, opts ...grpc.CallOption) (*OrderUpdateResponse, error) {
	out := new(OrderUpdateResponse)
	err := c.cc.Invoke(ctx, "/mercenario.DirectorService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServiceServer is the server API for DirectorService service.
// All implementations must embed UnimplementedDirectorServiceServer
// for forward compatibility
type DirectorServiceServer interface {
	StartMission(context.Context, *StartMissionRequest) (*StartMissionResponse, error)
	UpdateOrder(context.Context, *OrderUpdateRequest) (*OrderUpdateResponse, error)
	mustEmbedUnimplementedDirectorServiceServer()
}

// UnimplementedDirectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServiceServer struct {
}

func (UnimplementedDirectorServiceServer) StartMission(context.Context, *StartMissionRequest) (*StartMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMission not implemented")
}
func (UnimplementedDirectorServiceServer) UpdateOrder(context.Context, *OrderUpdateRequest) (*OrderUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedDirectorServiceServer) mustEmbedUnimplementedDirectorServiceServer() {}

// UnsafeDirectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServiceServer will
// result in compilation errors.
type UnsafeDirectorServiceServer interface {
	mustEmbedUnimplementedDirectorServiceServer()
}

func RegisterDirectorServiceServer(s grpc.ServiceRegistrar, srv DirectorServiceServer) {
	s.RegisterService(&DirectorService_ServiceDesc, srv)
}

func _DirectorService_StartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).StartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.DirectorService/StartMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).StartMission(ctx, req.(*StartMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.DirectorService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).UpdateOrder(ctx, req.(*OrderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectorService_ServiceDesc is the grpc.ServiceDesc for DirectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercenario.DirectorService",
	HandlerType: (*DirectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMission",
			Handler:    _DirectorService_StartMission_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _DirectorService_UpdateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dir_merc.proto",
}
