// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/dir_merc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectorClient is the client API for Director service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorClient interface {
	// Mercenario informa su estado de preparación
	Preparacion(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Respuesta, error)
	// Mercenario informa su decisión en un piso específico
	DecisionesPiso(ctx context.Context, in *Piso, opts ...grpc.CallOption) (*Respuesta, error)
	// Mercenario consulta el monto acumulado en el doshbank
	ConsultarDoshBank(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Monto, error)
	// Director envía la señal de inicio de piso a cada mercenario
	IniciarPiso(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Iniciar, error)
	// Director informa a un mercenario específico sobre su muerte
	InformarMuerte(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Respuesta, error)
}

type directorClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorClient(cc grpc.ClientConnInterface) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) Preparacion(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/mercenario.Director/Preparacion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) DecisionesPiso(ctx context.Context, in *Piso, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/mercenario.Director/DecisionesPiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConsultarDoshBank(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Monto, error) {
	out := new(Monto)
	err := c.cc.Invoke(ctx, "/mercenario.Director/ConsultarDoshBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) IniciarPiso(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*Iniciar, error) {
	out := new(Iniciar)
	err := c.cc.Invoke(ctx, "/mercenario.Director/IniciarPiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) InformarMuerte(ctx context.Context, in *Mercenario, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/mercenario.Director/InformarMuerte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServer is the server API for Director service.
// All implementations must embed UnimplementedDirectorServer
// for forward compatibility
type DirectorServer interface {
	// Mercenario informa su estado de preparación
	Preparacion(context.Context, *Mercenario) (*Respuesta, error)
	// Mercenario informa su decisión en un piso específico
	DecisionesPiso(context.Context, *Piso) (*Respuesta, error)
	// Mercenario consulta el monto acumulado en el doshbank
	ConsultarDoshBank(context.Context, *Vacio) (*Monto, error)
	// Director envía la señal de inicio de piso a cada mercenario
	IniciarPiso(context.Context, *Vacio) (*Iniciar, error)
	// Director informa a un mercenario específico sobre su muerte
	InformarMuerte(context.Context, *Mercenario) (*Respuesta, error)
	mustEmbedUnimplementedDirectorServer()
}

// UnimplementedDirectorServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServer struct {
}

func (UnimplementedDirectorServer) Preparacion(context.Context, *Mercenario) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preparacion not implemented")
}
func (UnimplementedDirectorServer) DecisionesPiso(context.Context, *Piso) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionesPiso not implemented")
}
func (UnimplementedDirectorServer) ConsultarDoshBank(context.Context, *Vacio) (*Monto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarDoshBank not implemented")
}
func (UnimplementedDirectorServer) IniciarPiso(context.Context, *Vacio) (*Iniciar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarPiso not implemented")
}
func (UnimplementedDirectorServer) InformarMuerte(context.Context, *Mercenario) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformarMuerte not implemented")
}
func (UnimplementedDirectorServer) mustEmbedUnimplementedDirectorServer() {}

// UnsafeDirectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServer will
// result in compilation errors.
type UnsafeDirectorServer interface {
	mustEmbedUnimplementedDirectorServer()
}

func RegisterDirectorServer(s grpc.ServiceRegistrar, srv DirectorServer) {
	s.RegisterService(&Director_ServiceDesc, srv)
}

func _Director_Preparacion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mercenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).Preparacion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/Preparacion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).Preparacion(ctx, req.(*Mercenario))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_DecisionesPiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Piso)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DecisionesPiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/DecisionesPiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DecisionesPiso(ctx, req.(*Piso))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConsultarDoshBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConsultarDoshBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/ConsultarDoshBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConsultarDoshBank(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_IniciarPiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).IniciarPiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/IniciarPiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).IniciarPiso(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_InformarMuerte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mercenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).InformarMuerte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mercenario.Director/InformarMuerte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).InformarMuerte(ctx, req.(*Mercenario))
	}
	return interceptor(ctx, in, info, handler)
}

// Director_ServiceDesc is the grpc.ServiceDesc for Director service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Director_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercenario.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preparacion",
			Handler:    _Director_Preparacion_Handler,
		},
		{
			MethodName: "DecisionesPiso",
			Handler:    _Director_DecisionesPiso_Handler,
		},
		{
			MethodName: "ConsultarDoshBank",
			Handler:    _Director_ConsultarDoshBank_Handler,
		},
		{
			MethodName: "IniciarPiso",
			Handler:    _Director_IniciarPiso_Handler,
		},
		{
			MethodName: "InformarMuerte",
			Handler:    _Director_InformarMuerte_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dir_merc.proto",
}
